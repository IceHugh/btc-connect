name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "22"
  BUN_VERSION: "latest"

jobs:
  # 代码质量检查和测试
  test:
    name: 代码质量检查和测试
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 获取依赖缓存
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: 安装依赖
        run: bun install

      - name: 类型检查
        run: bun run typecheck

      - name: 代码规范检查
        run: bun run lint

      - name: 运行测试
        run: bun run test

      - name: 构建项目
        run: bun run build

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        with:
          name: build-artifacts
          path: packages/*/dist/
          retention-days: 7

  # 发布到 NPM（仅 main 分支）
  publish:
    name: 发布到 NPM
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    strategy:
      matrix:
        package: [core, react, vue]

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 安装 Node.js 和 NPM
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 安装 Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 获取依赖缓存
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: 安装依赖
        run: bun install

      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: packages/

      - name: 验证下载的构建产物
        run: |
          echo "检查下载的构建产物..."
          find packages/ -name "dist" -type d | while read dir; do
            echo "找到 dist 目录: $dir"
            ls -la "$dir" || echo "目录为空或不存在"
          done

      - name: 获取包信息
        id: package-info
        run: |
          cd packages/${{ matrix.package }}
          PACKAGE_VERSION=$(cat package.json | jq -r .version)
          PACKAGE_NAME=$(cat package.json | jq -r .name)
          echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "name=$PACKAGE_NAME" >> $GITHUB_OUTPUT

      - name: 检查 NPM 是否存在相同版本
        id: check-npm
        run: |
          PACKAGE_NAME="${{ steps.package-info.outputs.name }}"
          PACKAGE_VERSION="${{ steps.package-info.outputs.version }}"

          echo "🔍 检查包版本状态..."
          echo "包名: $PACKAGE_NAME"
          echo "版本: $PACKAGE_VERSION"

          # 使用 npm view 检查版本是否存在（更可靠的方法）
          if npm view "$PACKAGE_NAME@$PACKAGE_VERSION" >/dev/null 2>&1; then
            echo "✅ 版本 $PACKAGE_VERSION 已存在"
            echo "status=200" >> $GITHUB_OUTPUT

            # 获取当前 NPM 上的最新版本
            LATEST_VERSION=$(npm view "$PACKAGE_NAME" version)
            echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            echo "当前 NPM 最新版本: $LATEST_VERSION"
            echo "⚠️  版本 $PACKAGE_VERSION 已存在，跳过发布"
          else
            echo "ℹ️  版本 $PACKAGE_VERSION 不存在，可以发布"
            echo "status=404" >> $GITHUB_OUTPUT

            # 检查包是否存在并获取最新版本
            if npm view "$PACKAGE_NAME" version >/dev/null 2>&1; then
              LATEST_VERSION=$(npm view "$PACKAGE_NAME" version)
              echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
              echo "当前 NPM 最新版本: $LATEST_VERSION"

              # 版本比较检查
              if [ "$PACKAGE_VERSION" = "$LATEST_VERSION" ]; then
                echo "⚠️  版本 $PACKAGE_VERSION 已存在，跳过发布"
              elif [ "$(printf '%s\n' "$PACKAGE_VERSION" "$LATEST_VERSION" | sort -V | head -n1)" != "$PACKAGE_VERSION" ]; then
                echo "⚠️  版本 $PACKAGE_VERSION 低于 NPM 最新版本 $LATEST_VERSION"
                echo "建议更新本地版本号"
              else
                echo "✅ 版本 $PACKAGE_VERSION 可以发布（高于 NPM 最新版本 $LATEST_VERSION）"
              fi
            else
              echo "latest_version=not_found" >> $GITHUB_OUTPUT
              echo "ℹ️  包 $PACKAGE_NAME 在 NPM 上不存在，可以首次发布"
            fi
          fi

      - name: 验证 NPM 权限和作用域
        if: steps.check-npm.outputs.status != 200
        run: |
          echo "=== 验证 NPM 认证和作用域权限 ==="

          # 设置认证
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

          # 检查认证状态
          echo "检查 NPM 用户身份..."
          npm whoami || {
            echo "❌ NPM 认证失败"
            echo "可能的原因："
            echo "1. NPM_TOKEN 无效或已过期"
            echo "2. Token 权限不足"
            echo "3. 网络连接问题"
            exit 1
          }

          # 检查作用域是否存在
          PACKAGE_NAME="${{ steps.package-info.outputs.name }}"
          echo "检查包 $PACKAGE_NAME 的状态..."

          # 尝试获取包信息
          npm view $PACKAGE_NAME || {
            echo "⚠️  包 $PACKAGE_NAME 在 NPM 上不存在"
            echo "这通常意味着："
            echo "1. 作用域 @btc-connect 首次发布"
            echo "2. 需要手动初始化作用域"
            echo ""
            echo "📋 解决步骤："
            echo "1. 在本地执行: npm login"
            echo "2. cd packages/core && npm publish --access public"
            echo "3. 重新触发 CI/CD"
          }

      - name: 配置 NPM 认证
        if: steps.check-npm.outputs.status != 200
        env:
          BUN_NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # 验证 token 是否设置
          echo "BUN_NPM_TOKEN length: ${#BUN_NPM_TOKEN}"
          if [ -n "$BUN_NPM_TOKEN" ]; then
            echo "✅ NPM token 环境变量已设置"
          else
            echo "❌ NPM token 环境变量未设置"
            exit 1
          fi

      - name: 验证构建产物
        run: |
          echo "检查构建产物..."
          ls -la packages/${{ matrix.package }}/dist/
          echo "验证 package.json..."
          cat packages/${{ matrix.package }}/package.json | jq '.name, .version'

      - name: 发布到 NPM
        if: steps.check-npm.outputs.status != 200
        run: |
          cd packages/${{ matrix.package }}
          echo "当前目录: $(pwd)"
          echo "包名: ${{ matrix.package }}"

          # 设置 npm 认证
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          echo "✅ NPM 认证配置完成"

          # 显示当前认证状态
          echo "=== 检查 NPM 认证状态 ==="
          npm whoami || echo "认证检查失败，继续尝试发布"

          echo "=== 尝试发布到 NPM ==="

          # 首次发布尝试
          if npm publish --access public --verbose; then
            echo "🎉 发布成功！"
          else
            echo "❌ 发布失败，尝试诊断问题..."

            # 检查常见的发布问题
            PACKAGE_NAME=$(cat package.json | jq -r .name)
            PACKAGE_VERSION=$(cat package.json | jq -r .version)

            echo "📋 包信息："
            echo "  包名: $PACKAGE_NAME"
            echo "  版本: $PACKAGE_VERSION"
            echo "  用户: $(npm whoami 2>/dev/null || echo '认证失败')"

            # 检查是否是作用域问题
            if [[ $PACKAGE_NAME == @*/* ]]; then
              SCOPE=${PACKAGE_NAME%%/*}
              echo "🔍 检测到作用域包: $SCOPE"

              # 尝试检查作用域是否存在
              if ! npm view $PACKAGE_NAME >/dev/null 2>&1; then
                echo "⚠️  作用域包可能首次发布"
                echo "建议手动执行以下命令初始化作用域："
                echo "  npm login"
                echo "  cd packages/core"
                echo "  npm publish --access public"
              fi
            fi

            # 最后一次尝试，使用更详细的输出
            echo "🔄 最后尝试发布..."
            npm publish --access public --verbose --loglevel silly || {
              echo "💥 所有发布尝试均失败"
              echo "请检查："
              echo "1. NPM_TOKEN 是否有效且具有发布权限"
              echo "2. @btc-connect 作用域是否已初始化"
              echo "3. 包版本是否冲突"
              exit 1
            }
          fi

      - name: 创建 GitHub Release
        if: steps.check-npm.outputs.status != 200
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.package-info.outputs.name }}@${{ steps.package-info.outputs.version }}
          name: ${{ steps.package-info.outputs.name }} v${{ steps.package-info.outputs.version }}
          draft: false
          prerelease: false
          body: |
            🚀 发布 ${{ steps.package-info.outputs.name }} 版本 ${{ steps.package-info.outputs.version }}

            ## 变更内容
            - 自动构建和发布

            ## 安装
            ```bash
            npm install ${{ steps.package-info.outputs.name }}@${{ steps.package-info.outputs.version }}
            ```

            ## 文档
            - [README](https://github.com/${{ github.repository }}/tree/main/packages/${{ matrix.package }})
            - [更新日志](https://github.com/${{ github.repository }}/releases)

  # 通知
  notify:
    name: 构建通知
    runs-on: ubuntu-latest
    needs: [test, publish]
    if: always()

    steps:
      - name: 构建成功通知
        if: needs.test.result == 'success' && needs.publish.result == 'success'
        run: |
          echo "✅ CI/CD 流水线执行成功！"
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "🚀 包已发布到 NPM"
          else
            echo "✅ 代码质量检查和测试通过"
          fi

      - name: 构建失败通知
        if: needs.test.result == 'failure' || needs.publish.result == 'failure'
        run: |
          echo "❌ CI/CD 流水线执行失败！"
          echo "请检查日志并修复问题"
          exit 1
