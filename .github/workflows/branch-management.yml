name: 分支管理

on:
  create:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

jobs:
  # 分支创建检查
  branch-check:
    name: 分支规范检查
    runs-on: ubuntu-latest
    if: github.event_name == 'create'

    steps:
      - name: 检查分支命名规范
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          echo "检查分支: $BRANCH_NAME"

          # 检查受保护的分支
          if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "develop" || "$BRANCH_NAME" == "test" ]]; then
            echo "✅ 受保护分支创建: $BRANCH_NAME"
            exit 0
          fi

          # 检查功能分支命名规范
          if [[ "$BRANCH_NAME" =~ ^feature/|feat/ ]]; then
            echo "✅ 功能分支命名正确: $BRANCH_NAME"
            exit 0
          fi

          # 检查修复分支命名规范
          if [[ "$BRANCH_NAME" =~ ^fix/|bugfix/ ]]; then
            echo "✅ 修复分支命名正确: $BRANCH_NAME"
            exit 0
          fi

          # 检查热修复分支命名规范
          if [[ "$BRANCH_NAME" =~ ^hotfix/ ]]; then
            echo "✅ 热修复分支命名正确: $BRANCH_NAME"
            exit 0
          fi

          # 检查发布分支命名规范
          if [[ "$BRANCH_NAME" =~ ^release/ ]]; then
            echo "✅ 发布分支命名正确: $BRANCH_NAME"
            exit 0
          fi

          echo "❌ 分支命名不规范: $BRANCH_NAME"
          echo "请使用以下前缀:"
          echo "  - feature/ 或 feat/ (功能开发)"
          echo "  - fix/ 或 bugfix/ (问题修复)"
          echo "  - hotfix/ (紧急修复)"
          echo "  - release/ (版本发布)"
          exit 1

  # PR 检查
  pr-check:
    name: Pull Request 检查
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.base_ref == 'main'

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 检查 PR 目标分支
        run: |
          TARGET_BRANCH="${{ github.base_ref }}"
          SOURCE_BRANCH="${{ github.head_ref }}"

          echo "PR 从 $SOURCE_BRANCH 合并到 $TARGET_BRANCH"

          # 检查是否合并到 main 分支
          if [[ "$TARGET_BRANCH" == "main" ]]; then
            echo "✅ PR 目标为 main 分支，将触发发布流程"
            echo "⚠️ 请确保所有测试通过且版本已更新"
          fi

          # 检查是否合并到 develop 分支
          if [[ "$TARGET_BRANCH" == "develop" ]]; then
            echo "✅ PR 目标为 develop 分支，用于开发集成"
          fi

          # 检查是否合并到 test 分支
          if [[ "$TARGET_BRANCH" == "test" ]]; then
            echo "✅ PR 目标为 test 分支，用于集成测试"
          fi

      - name: 检查 PR 描述
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            if (!pr.body || pr.body.trim().length < 10) {
              core.setFailed('PR 描述不能为空且至少需要 10 个字符');
              return;
            }

            console.log('✅ PR 描述检查通过');

      - name: 检查提交信息规范
        run: |
          # 获取 PR 中的所有提交
          COMMITS=$(git log --format='%s' origin/${{ github.base_ref }}..origin/${{ github.head_ref }})

          echo "检查提交信息规范:"
          echo "$COMMITS"

          # 检查每个提交信息
          while IFS= read -r commit_msg; do
            if [[ -n "$commit_msg" ]]; then
              # 检查是否符合 conventional commits 规范
              if [[ ! "$commit_msg" =~ ^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .+ ]]; then
                echo "❌ 提交信息不规范: $commit_msg"
                echo "请使用 Conventional Commits 规范:"
                echo "  - feat: 新功能"
                echo "  - fix: 修复问题"
                echo "  - docs: 文档更新"
                echo "  - style: 代码格式调整"
                echo "  - refactor: 代码重构"
                echo "  - test: 测试相关"
                echo "  - chore: 构建过程或辅助工具的变动"
                echo "  - perf: 性能优化"
                echo "  - ci: CI/CD 相关"
                echo "  - build: 构建系统"
                echo "  - revert: 回滚提交"
                exit 1
              fi
            fi
          done <<< "$COMMITS"

          echo "✅ 所有提交信息符合规范"

  # 版本更新检查
  version-check:
    name: 版本更新检查
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.base_ref == 'main'

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 检查包版本是否更新
        run: |
          echo "检查合并到 main 分支时的版本更新..."

          # 检查 core 包版本
          if git diff --name-only origin/${{ github.base_ref }}..origin/${{ github.head_ref }} | grep -q "packages/core/package.json"; then
            echo "检测到 core 包版本变更"
            if git diff origin/${{ github.base_ref }}..origin/${{ github.head_ref }} packages/core/package.json | grep -q '"version"'; then
              echo "✅ core 包版本已更新"
            else
              echo "⚠️ core package.json 被修改但版本未更新"
            fi
          fi

          # 检查 react 包版本
          if git diff --name-only origin/${{ github.base_ref }}..origin/${{ github.head_ref }} | grep -q "packages/react/package.json"; then
            echo "检测到 react 包版本变更"
            if git diff origin/${{ github.base_ref }}..origin/${{ github.head_ref }} packages/react/package.json | grep -q '"version"'; then
              echo "✅ react 包版本已更新"
            else
              echo "⚠️ react package.json 被修改但版本未更新"
            fi
          fi

          # 检查 vue 包版本
          if git diff --name-only origin/${{ github.base_ref }}..origin/${{ github.head_ref }} | grep -q "packages/vue/package.json"; then
            echo "检测到 vue 包版本变更"
            if git diff origin/${{ github.base_ref }}..origin/${{ github.head_ref }} packages/vue/package.json | grep -q '"version"'; then
              echo "✅ vue 包版本已更新"
            else
              echo "⚠️ vue package.json 被修改但版本未更新"
            fi
          fi

      - name: 检查 CHANGELOG 更新
        run: |
          echo "检查 CHANGELOG 更新..."

          if git diff --name-only origin/${{ github.base_ref }}..origin/${{ github.head_ref }} | grep -q "CHANGELOG"; then
            echo "✅ 检测到 CHANGELOG 更新"
          else
            echo "⚠️ 合并到 main 分支建议更新 CHANGELOG"
            echo "请添加变更记录以方便用户了解更新内容"
          fi